name: Build Application

on:
  push:
    tags:
      - 'v*'  # 태그가 v로 시작할 때 실행 (예: v1.0.0)

# 권한 설정 추가
permissions:
  contents: write  # 릴리스 생성에 필요한 권한

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: batch_subs_gemini_linux
            asset_name: batch_subs_gemini_linux.zip
          - os: windows-latest
            artifact_name: batch_subs_gemini_windows
            asset_name: batch_subs_gemini_windows.zip
          - os: macos-latest
            artifact_name: batch_subs_gemini_macos
            asset_name: batch_subs_gemini_macos.zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      # Windows에서 UTF-8 인코딩 설정
      - name: Set UTF-8 Encoding on Windows
        if: matrix.os == 'windows-latest'
        run: |
          chcp 65001

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller>=6.0.0 pillow
          pip install -r requirements.txt
        env:
          PYTHONIOENCODING: utf-8

      # Windows에 특별한 의존성 설치
      - name: Install Windows-specific packages
        if: matrix.os == 'windows-latest'
        run: |
          pip install pywin32
        env:
          PYTHONIOENCODING: utf-8

      # Linux에서는 ffmpeg 환경 설정
      - name: Install ffmpeg on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      # Windows에서 맞춤형 빌드 스크립트 실행
      - name: Build with PyInstaller (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # 환경 정보 출력
          python -c "import sys; print(f'Python: {sys.version}')"
          python -c "import platform; print(f'Platform: {platform.platform()}')"
          
          # 빌드 명령 직접 실행
          pyinstaller --onedir --windowed --clean --noconfirm --name batch_subs_gemini --add-data "icons;icons" --hidden-import gemini_srt_translator --hidden-import google.generativeai --hidden-import google.api_core --hidden-import google.auth --hidden-import srt --hidden-import PyQt6 --hidden-import PyQt6.QtCore --hidden-import PyQt6.QtGui --hidden-import PyQt6.QtWidgets --hidden-import requests --hidden-import ffmpeg_utils --hidden-import subtitle_utils --collect-all google.generativeai --collect-all google.api_core --collect-all google.auth --collect-all srt --collect-binary pywin32 --runtime-hook=windows_fix.py batch_subs_gemini.py
        env:
          PYTHONIOENCODING: utf-8

      # 윈도우 런타임 훅 스크립트 생성
      - name: Create Windows runtime hook
        if: matrix.os == 'windows-latest'
        run: |
          echo "import os" > windows_fix.py
          echo "import sys" >> windows_fix.py
          echo "# Add DLL dirs to PATH to help find dependencies" >> windows_fix.py
          echo "os.environ['PATH'] = os.path.dirname(sys.executable) + os.pathsep + os.environ.get('PATH', '')" >> windows_fix.py
        shell: bash

      # 리눅스와 맥에서는 기존 방식으로 빌드
      - name: Build with PyInstaller (Linux & macOS)
        if: matrix.os != 'windows-latest'
        run: |
          python build.py
        env:
          PYTHONIOENCODING: utf-8

      - name: Package Application (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd dist
          zip -r ../${{ matrix.artifact_name }}.zip batch_subs_gemini/

      - name: Package Application (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd dist
          powershell Compress-Archive -Path batch_subs_gemini -DestinationPath ../${{ matrix.artifact_name }}.zip

      - name: Package Application (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cd dist
          zip -r ../${{ matrix.artifact_name }}.zip batch_subs_gemini.app/

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}.zip

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ matrix.artifact_name }}.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 